#!/usr/bin/perl

use strict;
use warnings;

use Perl::Critic;
use Perl::Critic::Utils;

use Template;
use Cwd qw(abs_path cwd);
use File::Basename;
use File::Find;
use English qw(-no_match_vars);

use constant SKIP_GOOD => 0; # Skip files with no violations?

use autodie;

my $lint_dir = cwd();

print STDERR "WARNING: .perlcriticrc not found in the current directory. Please create one with at least for example with for example 'severity = 4'."
    if !-r '.perlcriticrc';

my $critic_dir = "$lint_dir/critic_html";
my $critic_src_dir = "$lint_dir/critic_html/src";

mkdir $critic_dir;
mkdir $critic_src_dir;

# Analyse all perl files below the current directory.
my @files = @ARGV;
my (undef, undef, undef, undef, $uid, $gid ) = stat($files[0]);
my @perlcritic_text_output;

my @summary = (); # Store statistics on each file processed.
my $retcode = 0;

foreach my $file (@files) {
    # Create a new Critic for per file statistics.
    my $critic = Perl::Critic->new();

    my $file_safe = $file;
    $file_safe =~ s/[\W]/_/g;

    my @violations = $critic->critique($file);
    $retcode++ if @violations > 0;
    next if (!@violations && SKIP_GOOD);

    push @summary, { 'filename' => $file,
                     'link'     => "src/$file_safe.html",
                     'stats'    => $critic->statistics() };

    open my $FH, '<', $file;
    my @lines = <$FH>;
    close $FH;

    # Attach all violations to the line they were found on.
    my @violations_by_line = ();
    my $line_number = 1;
    foreach my $line (@lines) {
        # Get all the violations for the current line.
        my @line_violations = grep { $_->line_number() == $line_number} @violations;
        push @violations_by_line, { 'number'  => $line_number,
                                    'content' => $line,
                                    'violations' => \@line_violations };
        $line_number++;
    }

    write_html("$critic_src_dir/$file_safe.html", 'codefile', { 'title' => "Critic Analysis of $file",
                                                                'lines' => \@violations_by_line } );
	{
		my $header = <<EOF;
----------==\[$file\]==------------
EOF
		push @perlcritic_text_output, $header.`perlcritic \"$file\"`.$header.$/;
	}
}

write_html("$critic_dir/index.html", 'index', { 'title' => 'Perl::Critic::HTML Summary',
                                                'files' => \@summary });
# recursive chown created files
{
	find(\&found, $critic_dir);
}

print(join('', @perlcritic_text_output),$/);

exit $retcode;

sub found{
	chown $uid, $gid, $File::Find::name;
	return;
}

sub write_html {
    my ($filename, $template, $data) = @_;

    # Include templates from the install directory.
    my $tt = Template->new({ 'INCLUDE_PATH' => dirname(abs_path($PROGRAM_NAME)).'/templates' } );
    print "Writing $filename\n";
    open my $FILE, '>', $filename;
    $tt->process($template, $data, $FILE);
    close $FILE;

    return;
}
